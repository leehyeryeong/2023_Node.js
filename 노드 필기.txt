Node.js란?
: Ryan Dahl이 2009년에 확장성 있는 network application 빌드를 목표로 발표한 언어. 크롬의 V8 엔진을 사용하며 내부는 C/C++로 제작되었다.
홀수 버전과 짝수 버전(LTS)로 이루어져있다.

Node.js의 장점
 1. Node.js는 단일 스레드(Single-Thread)의 논 블로킹(Non-blocking I/O) 이벤트 기반 비동기 방식으로 처리되어 높은 처리 성능을 가지고 있다.
 2. 내장 HTTP 서버 라이브러리를 포함하고 있어 웹 서버에서 아파치 등의 별도의 소프트웨어 없이 동작하는 것이 가능하며 이를 통해 웹 서버의 동작에 있어 더 많은 통제를 가능케 한다.
 3. Javascript 언어로 Front-end 뿐만 아니라 Back-end 개발 환경을 구성할 수 있기에 생산성이 높고 러닝 커브가 줄어든다.
 4. 다양한 패키지 매니저(npm: node Package Manager)를 기반으로 다양한 모듈(패키지)을 제공하며 필요 라이브러리에 대해 설치하고 사용할 수 있기에 효율성이 좋다

 - JavaScript로 서버를 개발(Server Side)
 - 싱글 스레드로 작성
 - 이벤트 기반 Non-Blocking 및 비동기 처리(비동기 처리: 처리가 빨리 되는 대로 결과를 출력, 입력 순서 상관 X)
 - 간단한 확장 모듈 관리(NPM)

npm?
 - 빠른 개발 속도
 - 마이크로 서비스 아키텍쳐에 적합(유연성, 비용 절감)
 - 풍부한 생태계(오픈소스)
 - 다양한 기업지원(IBM, MS, Paypal 등등)

Node.js의 단점
 1. Node.js 모든 API는 ‘비동기 기반의 처리 방식’이라 서버의 로직이 복잡한 경우에 ‘콜백 함수 늪(callback hell)'에 빠질 수 있다.
   +) 콜백 함수(callback): 함수를 등록하면 어떤 이벤트가 발생했거나 특정 시점에 도달했을 때 시스템에서 호출하는 함수
 2. 단일 스레드(Single Thread)이기 때문에 하나의 작업이 오래 걸리는 웹 서비스에 경우 애플리케이션의 성능이 저하될 수 있다.

 - CPU 위주의 복잡한 계산 작업에 약함
 - Callback 지옥
 - 미성숙한 생태계

기본 자료형
 - boolean
 - null
 - undefined
 - number
 - string
 - symbol
 - null
 - NaN
 - 0
 - 빈 문자열("", '', ``)

사용자 정의형(User-Defined)
 - object

const 
 - block 범위의 상수

함수
 * 일반적인 형태
 : function 문자출력함수 (문자) {
    console.log('문자출력함수 '+문자);
  }

 * 함수명을 변수처럼 사용
 : printChar = 문자출력함수;
   printChar('b');

 * 익명함수 대입
 : printChar = function(문자) {
    console.log('익명함수 '+문자);
  }

arrow function
: 화살표로 함수의 축약(항상 익명함수)

 * (매개변수) => { 함수 코드 }
 * printChar = (문자) => {
    실행 코드;
   }